{"ast":null,"code":"import axios from 'axios';\nexport function Login() {}\nexport function Signup(userData, res) {\n  let defres = {\n    success: false,\n    message: 'Error: Cannot reach signup server'\n  };\n  axios.post('http://localhost:5000/users/signup', userData).then(res => {\n    defres = res.data;\n  });\n  res({\n    defres\n  });\n}\nexport function Verify(token) {\n  axios.post('http://localhost:5000/users/verify?token=' + token).then(res => res.json()).then(json => {\n    if (json.success) {\n      return token;\n    } else {\n      return false;\n    }\n  });\n}","map":{"version":3,"sources":["F:/Personal Projects/ReactJS+Python Soduko/Main Project/Sudoku-Deploy/src/components/utils/requests.js"],"names":["axios","Login","Signup","userData","res","defres","success","message","post","then","data","Verify","token","json"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,SAASC,KAAT,GAAiB,CAEvB;AACD,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,GAA1B,EAA+B;AAClC,MAAIC,MAAM,GAAG;AACTC,IAAAA,OAAO,EAAC,KADC;AAETC,IAAAA,OAAO,EAAE;AAFA,GAAb;AAIAP,EAAAA,KAAK,CAACQ,IAAN,CAAW,oCAAX,EAAiDL,QAAjD,EACCM,IADD,CACML,GAAG,IAAI;AACTC,IAAAA,MAAM,GAAGD,GAAG,CAACM,IAAb;AACH,GAHD;AAIAN,EAAAA,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,CAAH;AACH;AACD,OAAO,SAASM,MAAT,CAAgBC,KAAhB,EAAuB;AAC1BZ,EAAAA,KAAK,CAACQ,IAAN,CAAW,8CAA6CI,KAAxD,EACKH,IADL,CACUL,GAAG,IAAIA,GAAG,CAACS,IAAJ,EADjB,EAEKJ,IAFL,CAEUI,IAAI,IAAI;AACV,QAAGA,IAAI,CAACP,OAAR,EAAiB;AACb,aAAOM,KAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAP;AACH;AACJ,GARL;AASH","sourcesContent":["import axios from 'axios';\r\nexport function Login() {\r\n\r\n}\r\nexport function Signup(userData, res) {\r\n    let defres = {\r\n        success:false,\r\n        message: 'Error: Cannot reach signup server'\r\n    }\r\n    axios.post('http://localhost:5000/users/signup', userData)\r\n    .then(res => {\r\n        defres = res.data\r\n    })\r\n    res({defres})\r\n}\r\nexport function Verify(token) {\r\n    axios.post('http://localhost:5000/users/verify?token='+ token)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            if(json.success) {\r\n                return token\r\n            } else {\r\n                return false\r\n            }\r\n        })\r\n}"]},"metadata":{},"sourceType":"module"}