{"ast":null,"code":"var _jsxFileName = \"F:\\\\Personal Projects\\\\ReactJS+Python Soduko\\\\Main Project\\\\sodukoreact\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.module.css';\nimport Input1 from './assignComp/Input';\nimport Validate from './assignComp/Validation';\nimport Initials from './assignComp/Initials';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      charcount: 0,\n      input: [],\n      fullinput: \"\"\n    };\n\n    this.countChar = event => {\n      const tempcharcount = this.state.fullinput.length;\n      const tempstateinput = this.state.input;\n      tempstateinput.push(event.target.value.slice(-1));\n      this.setState({\n        charcount: tempcharcount,\n        input: tempstateinput,\n        fullinput: event.target.value\n      });\n    };\n\n    this.deleteChar = key => {\n      const tempstateinput = this.state.input;\n      const tempcharcount = this.state.fullinput.length; // console.log(tempstateinput);\n      // console.log(key);\n\n      tempstateinput.splice(key, 1);\n      this.setState({\n        charcount: tempcharcount,\n        input: tempstateinput,\n        fullinput: tempstateinput.join(\"\")\n      }); // console.log(tempstateinput)\n    };\n  }\n\n  // liveChar = () =>{\n  //   this.setState(\n  //     {\n  //     }\n  //   )\n  // }\n  render() {\n    let initial = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, this.state.input.map((initial, index) => {\n      return /*#__PURE__*/React.createElement(Initials, {\n        letters: initial,\n        key: index,\n        deletechar: () => this.deleteChar(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 18\n        }\n      });\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, \"Create an input field (in App component) with a change listener which outputs the length of the entered text below it (e.g. in a paragraph).\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, \"Create a new component (=> ValidationComponent) which receives the text length as a prop\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, \"Inside the ValidationComponent, either output \\\"Text too short\\\" or \\\"Text long enough\\\" depending on the text length (e.g. take 5 as a minimum length)\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, \"Create another component (=> CharComponent) and style it as an inline box (=> display: inline-block, padding: 16px, text-align: center, margin: 16px, border: 1px solid black).\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, \"Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in the initial input field) as a prop.\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, \"When you click a CharComponent, it should be removed from the entered text.\")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, \"Hint: Keep in mind that JavaScript strings are basically arrays!\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.deleteChar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, \"DELETE LAST\"), /*#__PURE__*/React.createElement(Input1, {\n      chars: this.countChar,\n      charcount: this.state.charcount,\n      val: this.state.fullinput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Validate, {\n      charCount: this.state.charcount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }), initial);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["F:/Personal Projects/ReactJS+Python Soduko/Main Project/sodukoreact/src/App.js"],"names":["React","Component","Input1","Validate","Initials","App","state","charcount","input","fullinput","countChar","event","tempcharcount","length","tempstateinput","push","target","value","slice","setState","deleteChar","key","splice","join","render","initial","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.module.css';\nimport Input1 from './assignComp/Input';\nimport Validate from './assignComp/Validation';\nimport Initials from './assignComp/Initials'\n\nclass App extends Component {\n  state = {\n    charcount: 0,\n    input: [],\n    fullinput: \"\"\n  }\n  countChar = (event) => {\n    const tempcharcount = this.state.fullinput.length;\n    const tempstateinput = this.state.input;\n    tempstateinput.push(event.target.value.slice(-1))\n      this.setState(\n        { \n          charcount: tempcharcount,\n          input: tempstateinput,\n          fullinput: event.target.value\n        }\n      )\n      \n    }\n  deleteChar = (key) => {\n    const tempstateinput = this.state.input;\n    const tempcharcount = this.state.fullinput.length;\n    // console.log(tempstateinput);\n    // console.log(key);\n    tempstateinput.splice(key,1);  \n    this.setState(\n      {\n        charcount: tempcharcount,\n        input: tempstateinput,\n        fullinput: tempstateinput.join(\"\")\n      }\n    )\n    // console.log(tempstateinput)\n  }\n  // liveChar = () =>{\n    \n  //   this.setState(\n  //     {\n        \n  //     }\n  //   )\n  // }\n  render() {\n    let initial = (\n      <div>\n        {this.state.input.map((initial, index) => {\n          return <Initials letters={initial} key={index} deletechar={()=>this.deleteChar(index)}/>;\n        })}\n      </div>\n    )\n    return (\n      <div className=\"App\">\n        <ol>\n          <li>Create an input field (in App component) with a change listener which outputs the length of the entered text below it (e.g. in a paragraph).</li>\n          <li>Create a new component (=> ValidationComponent) which receives the text length as a prop</li>\n          <li>Inside the ValidationComponent, either output \"Text too short\" or \"Text long enough\" depending on the text length (e.g. take 5 as a minimum length)</li>\n          <li>Create another component (=> CharComponent) and style it as an inline box (=> display: inline-block, padding: 16px, text-align: center, margin: 16px, border: 1px solid black).</li>\n          <li>Render a list of CharComponents where each CharComponent receives a different letter of the entered text (in the initial input field) as a prop.</li>\n          <li>When you click a CharComponent, it should be removed from the entered text.</li>\n        </ol>\n        <p>Hint: Keep in mind that JavaScript strings are basically arrays!</p>\n        <button onClick={this.deleteChar}>DELETE LAST</button>\n        <Input1 chars={this.countChar} charcount={this.state.charcount} val={this.state.fullinput}/>\n        <Validate charCount={this.state.charcount} />\n        {initial}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}