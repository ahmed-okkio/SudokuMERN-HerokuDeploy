{"ast":null,"code":"var _jsxFileName = \"F:\\\\Personal Projects\\\\ReactJS+Python Soduko\\\\Main Project\\\\React+Python Project\\\\src\\\\components\\\\Game\\\\Game.js\";\nimport React, { useState, useEffect } from 'react';\nimport classes from '../../CSS/GameStyle.module.css';\nimport LogicContainers from './GridComponents/LogicContainers';\nimport GridOverlay from './GridComponents/GridOverlay';\nimport InputPad from './GridComponents/Input';\nimport padContext from '../Context/Pad-context';\nimport Solve from '../Buttons/Solve';\nimport Timer from '../Timer/Timer';\n\nconst Game = () => {\n  const [Padstate, setPadstate] = useState({\n    showPad: false,\n    Xcoords: null,\n    Ycoords: null,\n    cellindex: null\n  });\n\n  const ClosePad = () => {\n    setPadstate({\n      showPad: false\n    });\n  };\n\n  const PadHandler = (event, stat, Sector, index) => {\n    if (Padstate.showPad || stat == \"static\") {\n      setPadstate({\n        showPad: false\n      });\n    } else {\n      setPadstate({\n        showPad: true,\n        Xcoords: event.clientX,\n        Ycoords: event.clientY,\n        cellindex: index,\n        Sector: Sector\n      });\n    }\n  };\n\n  const InputHandler = padinput => {\n    let Tempstate = ActivePuzzle;\n    Tempstate[Padstate.Sector][Padstate.cellindex] = padinput.toString();\n    SetPuzzle(Tempstate);\n    setPadstate({\n      showPad: false\n    });\n  };\n\n  let inputmenu = null;\n\n  if (Padstate.showPad) {\n    inputmenu = /*#__PURE__*/React.createElement(InputPad, {\n      InputHandler: InputHandler,\n      Ycoords: Padstate.Ycoords,\n      Xcoords: Padstate.Xcoords,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    });\n  }\n\n  const [ActivePuzzle, SetPuzzle] = useState({\n    R1: [null],\n    R2: [],\n    R3: [],\n    R4: [],\n    R5: [],\n    R6: [],\n    R7: [],\n    R8: [],\n    R9: []\n  });\n  const [gameState, setgameState] = useState({\n    startGame: false\n  });\n  let GameComponents = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, Object.keys(ActivePuzzle).map((Sector, key) => {\n    return /*#__PURE__*/React.createElement(LogicContainers, Object.assign({\n      start: gameState.startGame\n    }, Padstate, {\n      PadHandler: PadHandler,\n      Data: ActivePuzzle[Sector],\n      Sector: Sector,\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }));\n  }));\n\n  const PuzzleLoader = () => {\n    const P0 = \"004300209005009001070060043006002087190007400050083000600000105003508690042910300\";\n    let P1 = P0.split(\"\");\n    let P2 = {\n      R1: [],\n      R2: [],\n      R3: [],\n      R4: [],\n      R5: [],\n      R6: [],\n      R7: [],\n      R8: [],\n      R9: []\n    };\n\n    for (let n = 1; n < 10; n++) {\n      for (let i = 0; i < 9; i++) {\n        P2[\"R\" + n].push(parseInt(P1[i * n]));\n      }\n    }\n\n    SetPuzzle(P2);\n  };\n\n  const gameHandler = () => {\n    let tempstate = gameState.startGame;\n    setgameState({\n      startGame: !tempstate\n    });\n    PuzzleLoader();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.GameStyleContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Timer, {\n    gameStart: gameState.startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(GridOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(padContext.Provider, {\n    value: {\n      showPad: Padstate.showPad,\n      PadHandler: PadHandler\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.GameContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, GameComponents))), inputmenu, /*#__PURE__*/React.createElement(Solve, {\n    onClick: gameHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"START\"));\n};\n\nexport default Game;","map":{"version":3,"sources":["F:/Personal Projects/ReactJS+Python Soduko/Main Project/React+Python Project/src/components/Game/Game.js"],"names":["React","useState","useEffect","classes","LogicContainers","GridOverlay","InputPad","padContext","Solve","Timer","Game","Padstate","setPadstate","showPad","Xcoords","Ycoords","cellindex","ClosePad","PadHandler","event","stat","Sector","index","clientX","clientY","InputHandler","padinput","Tempstate","ActivePuzzle","toString","SetPuzzle","inputmenu","R1","R2","R3","R4","R5","R6","R7","R8","R9","gameState","setgameState","startGame","GameComponents","Object","keys","map","key","PuzzleLoader","P0","P1","split","P2","n","i","push","parseInt","gameHandler","tempstate","GameStyleContainer","GameContainer"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport classes from '../../CSS/GameStyle.module.css';\r\nimport LogicContainers from './GridComponents/LogicContainers';\r\nimport GridOverlay  from './GridComponents/GridOverlay';\r\nimport InputPad from './GridComponents/Input';\r\nimport padContext from '../Context/Pad-context';\r\nimport Solve from '../Buttons/Solve';\r\nimport Timer from '../Timer/Timer';\r\nconst Game = () =>{\r\n    const [Padstate,setPadstate] = useState({\r\n        showPad:false,\r\n        Xcoords: null,\r\n        Ycoords:null,\r\n        cellindex: null\r\n    })\r\n    const ClosePad = () =>{\r\n        setPadstate({\r\n            showPad:false\r\n        })\r\n    }\r\n    const PadHandler =(event, stat, Sector,index)=>{\r\n        if(Padstate.showPad||stat==\"static\"){\r\n            setPadstate({\r\n                showPad:false\r\n            });\r\n        }\r\n        else{    \r\n            setPadstate({\r\n                showPad:true,\r\n                Xcoords: event.clientX,\r\n                Ycoords: event.clientY,\r\n                cellindex: index,\r\n                Sector: Sector\r\n            })\r\n        }\r\n    }\r\n    const InputHandler=(padinput)=>{\r\n        let Tempstate = ActivePuzzle\r\n        Tempstate[Padstate.Sector][Padstate.cellindex]= padinput.toString()\r\n\r\n        SetPuzzle(Tempstate)\r\n        setPadstate({\r\n            showPad:false\r\n        })\r\n \r\n    }\r\n    let inputmenu = null;\r\n    if(Padstate.showPad){\r\n        inputmenu = (\r\n        <InputPad InputHandler={InputHandler}Ycoords={Padstate.Ycoords} Xcoords={Padstate.Xcoords}/>\r\n        );\r\n    }\r\n    const  [ActivePuzzle,SetPuzzle] = useState({\r\n        R1:[null],\r\n        R2:[],\r\n        R3:[],\r\n        R4:[],\r\n        R5:[],\r\n        R6:[],\r\n        R7:[],\r\n        R8:[],\r\n        R9:[]});\r\n    \r\n    const [gameState,setgameState] = useState({\r\n        startGame:false\r\n    })\r\n    \r\n    let   GameComponents = (\r\n        <div >\r\n            {Object.keys(ActivePuzzle).map((Sector,key)=>{\r\n                return(\r\n                    <LogicContainers start={gameState.startGame} {...Padstate} PadHandler={PadHandler}Data={ActivePuzzle[Sector]} Sector={Sector}key={key}/>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    )\r\n    const PuzzleLoader = ()=>{\r\n        const P0  =\"004300209005009001070060043006002087190007400050083000600000105003508690042910300\"\r\n        let P1 = P0.split(\"\")\r\n        let P2 ={\r\n            R1:[],\r\n            R2:[],\r\n            R3:[],\r\n            R4:[],\r\n            R5:[],\r\n            R6:[],\r\n            R7:[],\r\n            R8:[],\r\n            R9:[]}  \r\n        for(let n = 1; n <10;n++){      \r\n            for(let i =0;i<9;i++){\r\n                \r\n                P2[\"R\"+n].push(parseInt(P1[i*n]))\r\n                \r\n            }           \r\n        }\r\n        SetPuzzle(P2)\r\n\r\n    }\r\n    const gameHandler =()=>{\r\n        let tempstate = gameState.startGame\r\n        setgameState({\r\n            startGame: !tempstate\r\n        })\r\n        PuzzleLoader()\r\n     }\r\n    \r\n    \r\n  \r\n    return(\r\n        <div >\r\n            \r\n            <div className={classes.GameStyleContainer} >\r\n                <Timer gameStart={gameState.startGame}/>\r\n                <GridOverlay/>\r\n                <padContext.Provider value={{showPad: Padstate.showPad, PadHandler:PadHandler}}>\r\n                <div className={classes.GameContainer}>\r\n                    {GameComponents}\r\n                </div>\r\n                </padContext.Provider>\r\n            </div>\r\n            {inputmenu}\r\n            <Solve onClick={gameHandler}>START</Solve>\r\n        </div>\r\n    )\r\n};\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}